{
  "hash": "6a687c9c00b8d2f7cad4ca40844217b9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Bitwise Logical Operations in R\"\ndate: \"2024-09-20\"\ncategories:\n  - R\n  - Programming\ntoc: true\n#toc-expand: false\ndraft: false\n---\n\n\n\n\nRecently I've been refreshing my knowledge of R by going over problems from the R track on [Exercism](https://exercism.org/tracks/r). A recurring technique needed[^1] for the problems in these tracks is to be able to convert integers into their binary representation.\n\n# First Attempt\n\nMy first attempt at converting an integer $n$ into its binary representation involved repeatedly dividing the integer by 2 and taking the remainders as follows:\n\n\n\n\n::: {.cell}\n\n```{#lst-first-attempt .r .cell-code  lst-cap=\"First Attempt\"}\nto_binary_1 <- function(n) {\n  if (n == 0) {\n    return(0)\n  }\n\n  binary <- c()\n\n  while (n > 0) {\n    remainder <- n %% 2\n    binary <- c(remainder, binary)\n    n <- n %/% 2\n  }\n\n  as.integer(binary)\n}\n```\n:::\n\n\n\n\nTesting this out with $n = 17$ we get what the expected output of 10001[^2]:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nto_binary_1(17)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 0 0 0 1\n```\n\n\n:::\n:::\n\n\n\n\n# Bitwise Logical Operations\n\nThis works fine, however my goal was to explore multiple ways to accomplish the same task. After looking at the community solutions I came across a solution which utilised the R function `bitwAnd`. This led me to the documentation for this function which stated[^3]:\n\n::: {.callout-note title=\"Documentation\"}\n**Bitwise Logical Operations**\n\n**Description**:\n\n  Logical operations on integer vectors with elements viewed as sets of bits.\n\n**Usage**:\n\n     bitwNot(a)\n     bitwAnd(a, b)\n     bitwOr(a, b)\n     bitwXor(a, b)\n:::\n\nThis was a bit opaque to me and after some research on bitwise logical operations I found that these functions convert their inputs to binary representations and then perform the corresponding logical operation on each bit[^4]. For example: `bitwAnd(6, 3)` will first convert 6 and 3 to binary: 6 being 110 and 3 being 011. The bits are then aligned[^5] on top of one another:\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"vpqhescycm\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#vpqhescycm table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#vpqhescycm thead, #vpqhescycm tbody, #vpqhescycm tfoot, #vpqhescycm tr, #vpqhescycm td, #vpqhescycm th {\n  border-style: none;\n}\n\n#vpqhescycm p {\n  margin: 0;\n  padding: 0;\n}\n\n#vpqhescycm .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#vpqhescycm .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#vpqhescycm .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#vpqhescycm .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#vpqhescycm .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#vpqhescycm .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#vpqhescycm .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#vpqhescycm .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#vpqhescycm .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#vpqhescycm .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#vpqhescycm .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#vpqhescycm .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#vpqhescycm .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#vpqhescycm .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#vpqhescycm .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#vpqhescycm .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#vpqhescycm .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#vpqhescycm .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#vpqhescycm .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#vpqhescycm .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#vpqhescycm .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#vpqhescycm .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#vpqhescycm .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#vpqhescycm .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#vpqhescycm .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#vpqhescycm .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#vpqhescycm .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#vpqhescycm .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#vpqhescycm .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#vpqhescycm .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#vpqhescycm .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#vpqhescycm .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#vpqhescycm .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#vpqhescycm .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#vpqhescycm .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#vpqhescycm .gt_left {\n  text-align: left;\n}\n\n#vpqhescycm .gt_center {\n  text-align: center;\n}\n\n#vpqhescycm .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#vpqhescycm .gt_font_normal {\n  font-weight: normal;\n}\n\n#vpqhescycm .gt_font_bold {\n  font-weight: bold;\n}\n\n#vpqhescycm .gt_font_italic {\n  font-style: italic;\n}\n\n#vpqhescycm .gt_super {\n  font-size: 65%;\n}\n\n#vpqhescycm .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#vpqhescycm .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#vpqhescycm .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#vpqhescycm .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#vpqhescycm .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#vpqhescycm .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#vpqhescycm .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#vpqhescycm .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#vpqhescycm div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Input\">Input</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Binary\">Binary</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"Input\" class=\"gt_row gt_right\">6</td>\n<td headers=\"Binary\" class=\"gt_row gt_right\">011</td></tr>\n    <tr><td headers=\"Input\" class=\"gt_row gt_right\">3</td>\n<td headers=\"Binary\" class=\"gt_row gt_right\">110</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n\n\nPerforming the `and` operation on each bit yields 010 in binary which is then converted back to the integer representation of 2 as the following code confirms:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbitwAnd(3, 6)  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n\nVectorisation is a main idea in R so what should the following expression yield: `bitwAnd(6,1:6)`?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbitwAnd(6, 1:6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0 2 2 4 4 6\n```\n\n\n:::\n:::\n\n\n\n\nFrom the result we can see that this is a vector with the $i^{\\text{th}}$ component given by `bitwAnd(6, i)` as the following table confirms:\n\n\n\n\n::: {#tbl-binaryreps .cell tbl-caption='Binary representations'}\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"prszvnbmzc\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#prszvnbmzc table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#prszvnbmzc thead, #prszvnbmzc tbody, #prszvnbmzc tfoot, #prszvnbmzc tr, #prszvnbmzc td, #prszvnbmzc th {\n  border-style: none;\n}\n\n#prszvnbmzc p {\n  margin: 0;\n  padding: 0;\n}\n\n#prszvnbmzc .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#prszvnbmzc .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#prszvnbmzc .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#prszvnbmzc .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#prszvnbmzc .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#prszvnbmzc .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#prszvnbmzc .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#prszvnbmzc .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#prszvnbmzc .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#prszvnbmzc .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#prszvnbmzc .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#prszvnbmzc .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#prszvnbmzc .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#prszvnbmzc .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#prszvnbmzc .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#prszvnbmzc .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#prszvnbmzc .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#prszvnbmzc .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#prszvnbmzc .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#prszvnbmzc .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#prszvnbmzc .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#prszvnbmzc .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#prszvnbmzc .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#prszvnbmzc .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#prszvnbmzc .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#prszvnbmzc .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#prszvnbmzc .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#prszvnbmzc .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#prszvnbmzc .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#prszvnbmzc .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#prszvnbmzc .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#prszvnbmzc .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#prszvnbmzc .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#prszvnbmzc .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#prszvnbmzc .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#prszvnbmzc .gt_left {\n  text-align: left;\n}\n\n#prszvnbmzc .gt_center {\n  text-align: center;\n}\n\n#prszvnbmzc .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#prszvnbmzc .gt_font_normal {\n  font-weight: normal;\n}\n\n#prszvnbmzc .gt_font_bold {\n  font-weight: bold;\n}\n\n#prszvnbmzc .gt_font_italic {\n  font-style: italic;\n}\n\n#prszvnbmzc .gt_super {\n  font-size: 65%;\n}\n\n#prszvnbmzc .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#prszvnbmzc .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#prszvnbmzc .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#prszvnbmzc .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#prszvnbmzc .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#prszvnbmzc .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#prszvnbmzc .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#prszvnbmzc .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#prszvnbmzc div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"LHS\">LHS</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"RHS\">RHS</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Binary_LHS\">Binary_LHS</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Binary_RHS\">Binary_RHS</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Binary_Result\">Binary_Result</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Result\">Result</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"LHS\" class=\"gt_row gt_right\">6</td>\n<td headers=\"RHS\" class=\"gt_row gt_right\">1</td>\n<td headers=\"Binary_LHS\" class=\"gt_row gt_right\">110</td>\n<td headers=\"Binary_RHS\" class=\"gt_row gt_right\">001</td>\n<td headers=\"Binary_Result\" class=\"gt_row gt_right\">000</td>\n<td headers=\"Result\" class=\"gt_row gt_right\">0</td></tr>\n    <tr><td headers=\"LHS\" class=\"gt_row gt_right\">6</td>\n<td headers=\"RHS\" class=\"gt_row gt_right\">2</td>\n<td headers=\"Binary_LHS\" class=\"gt_row gt_right\">110</td>\n<td headers=\"Binary_RHS\" class=\"gt_row gt_right\">010</td>\n<td headers=\"Binary_Result\" class=\"gt_row gt_right\">010</td>\n<td headers=\"Result\" class=\"gt_row gt_right\">2</td></tr>\n    <tr><td headers=\"LHS\" class=\"gt_row gt_right\">6</td>\n<td headers=\"RHS\" class=\"gt_row gt_right\">3</td>\n<td headers=\"Binary_LHS\" class=\"gt_row gt_right\">110</td>\n<td headers=\"Binary_RHS\" class=\"gt_row gt_right\">011</td>\n<td headers=\"Binary_Result\" class=\"gt_row gt_right\">010</td>\n<td headers=\"Result\" class=\"gt_row gt_right\">2</td></tr>\n    <tr><td headers=\"LHS\" class=\"gt_row gt_right\">6</td>\n<td headers=\"RHS\" class=\"gt_row gt_right\">4</td>\n<td headers=\"Binary_LHS\" class=\"gt_row gt_right\">110</td>\n<td headers=\"Binary_RHS\" class=\"gt_row gt_right\">100</td>\n<td headers=\"Binary_Result\" class=\"gt_row gt_right\">100</td>\n<td headers=\"Result\" class=\"gt_row gt_right\">4</td></tr>\n    <tr><td headers=\"LHS\" class=\"gt_row gt_right\">6</td>\n<td headers=\"RHS\" class=\"gt_row gt_right\">5</td>\n<td headers=\"Binary_LHS\" class=\"gt_row gt_right\">110</td>\n<td headers=\"Binary_RHS\" class=\"gt_row gt_right\">101</td>\n<td headers=\"Binary_Result\" class=\"gt_row gt_right\">100</td>\n<td headers=\"Result\" class=\"gt_row gt_right\">4</td></tr>\n    <tr><td headers=\"LHS\" class=\"gt_row gt_right\">6</td>\n<td headers=\"RHS\" class=\"gt_row gt_right\">6</td>\n<td headers=\"Binary_LHS\" class=\"gt_row gt_right\">110</td>\n<td headers=\"Binary_RHS\" class=\"gt_row gt_right\">110</td>\n<td headers=\"Binary_Result\" class=\"gt_row gt_right\">110</td>\n<td headers=\"Result\" class=\"gt_row gt_right\">6</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n\n\n# Second Attempt\n\nThis bitwise `and` operation leads us to an explanation for a much shorter function for converting positive integers to their binary representation:\n\n\n\n\n\n::: {.cell}\n\n```{#lst-second-attempt .r .cell-code  lst-cap=\"Second Attempt\"}\nto_binary_2 <- function(n) {\n  stopifnot(n > 0)\n  limit <- floor(log2(n))\n  as.integer(bitwAnd(n, 2 ^ (limit:0)) > 0)\n}\n```\n:::\n\n\n\n\nBefore explaining this function lets test it out:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(purrr)\n\n1:6 |> map(to_binary_2) |>\n  map(~ paste0(.x, collapse = \"\")) |>\n  unlist()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1\"   \"10\"  \"11\"  \"100\" \"101\" \"110\"\n```\n\n\n:::\n:::\n\n\n\n\n<!-- This matches with the results given in @tbl-binaryreps. -->\nThis matches with the binary representations for the RHS given in the table above.\n\n## Explanation\n\nLet's now explain how this function works. The key idea of this function is to use the bitwise `and` operation to extract the $i^{\\text{th}}$ digit of the binary representation of $n$ as follows:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_binary_digit <- function(n, i){\n  out <- bitwAnd(n, 2 ^ (i - 1))\n  as.integer(out > 0)\n}\n```\n:::\n\n\n\n\nThis works because we perform a bitwise `and` operation on the binary representations of $n$ with the binary representation of the appropriate power of 2. The binary representation of $2^{i - 1}$ has a single 1 in the $i^{\\text{th}}$ position and so performing this bitwise `and` operation with the binary representation of $n$ will result in a binary vector with all zeros apart from *perhaps* a single 1 located in the $i^{\\text{th}}$ position if and only if there is a 1 in the representation of $n$. Since the `bitwAnd` function returns the result not as a binary vector but as the integer the binary vector represents we convert the result to the appropriate binary digit by testing if the output is positive[^6].\n\n::: {.callout-note}\n\nThis is akin to finding the $i^{\\text{th}}$ coordinate of a vector $\\mathbf{v}$ in a given orthogonal basis $\\{\\mathbf{e}_{i}\\}_{i}$ by taking the dot product of the vector with the $i^{\\text{th}}$ basis vector:\n\n$$\n\\mathbf{v} = \\sum_{i} v_{i} \\mathbf{v}_{i}\n$$\n\nwhere the coefficient $v_{i}$ is given by:\n\n$$\nv_{i} = \\langle \\mathbf{v}, \\mathbf{e}_{i}\\rangle\n$$\n\nIn the binary representation problem above the binary representations of powers of 2 can be thought of as the orthogonal basis - in fact as a sort of **canonical basis** for the representation.\n:::\n\nThus, the line `as.integer(bitwAnd(n, 2 ^ (limit:0)) > 0)` in @lst-second-attempt simply extracts all the binary digits of $n$ in a vectorised fashion[^7]. \n\n# Performance Benchmarking\n\nLet's use the library `microbenchmark` to quickly do a performance Benchmark for the two functions given in @lst-first-attempt and @lst-second-attempt.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(microbenchmark)\n\nn <- 134632625\nmbm <- microbenchmark(\n  \"attempt 1\" = { to_binary_1(n) },\n  \"attempt 2\" = { to_binary_2(n) },\n  check = function(vals) identical(vals[[1]], vals[[2]])\n)\nmbm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n      expr    min      lq     mean  median      uq    max neval\n attempt 1 18.525 19.3285 20.35540 19.9615 20.5455 34.390   100\n attempt 2  5.576  5.9890  6.62093  6.2550  6.5535 21.562   100\n```\n\n\n:::\n:::\n\n\n\n\nWe can see from the above output that our second attempt is quite faster on average.\n\nOne nice feature of `microbenchmark` is that it integrates nicely with `ggplot2` and allows easy visualisation of the benchmark results:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nautoplot(mbm)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\nWe can see graphically the superior performance of `to_binary_2`.\n\n\n[^1]: Indeed in many of the tracks and in computer science in general.\n[^2]: Since $17 = 16 + 1 = 2^4 + 2^0$.\n[^3]: To see the full docs run `?bitwAnd` in an R console.\n[^4]: With the convention that the bit 1 represents `TRUE` and 0 represents `FALSE`.\n[^5]: Note that the binary representation is left padded with zeros so the lengths match.\n[^6]: The output will be positive if and only if the $i^{\\text{th}}$ binary digit was a 1.\n[^7]: The defintion of `limit` as `floor(log2(n))` is simply 1 less than the number of binary digits in $n$.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}