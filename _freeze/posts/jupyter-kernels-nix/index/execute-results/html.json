{
  "hash": "73da0da95682e5babf742e80bff28a24",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Setting up Jupyter Lab with Additional Kernels in NixOS\"\ndate: \"2025-03-02\"\ncategories:\n  - Nix\n  - Programming\n  - R\n  - Python\n  - Rust\ntoc: true\n#toc-expand: false\ndraft: false\n---\n\n\n\n\nRecently, I've been trying to experiment more with plotting in R using `ggplot2` and `plotly` for more interactive visualizations. As part of this experimentation I've tried to setup [Jupyter Lab](https://jupyter.org/) on my personal laptop where I have been daily driving [NixOS](https://nixos.org/) for the last few years. In the past, and during my PhD I was mainly coding in Python and using Jupyter with Python on NixOS was quite straight-forward. However, as I now am using R in my job I've tried to also setup my dev environment on my personal computer for R using Nix. My main workflow so far resolves around using [Radian](https://github.com/randy3k/radian) as my R console and coding with [Neovim](https://neovim.io/) as my IDE, tying the two together with [Zellij](https://zellij.dev/). However, as I've lately been experimenting more with plotting in R I've wanted to start using Jupyter Lab again for a more visual iterative REPL driven workflow. Achieving this took a bit more digging than I thought necessary. As such, I'm collating my notes here, mainly as a reference for my future self and in case anyone else is also struggling with this.\n\n# TLDR\n\nI will be outlining how I've setup a Nix Flake to create a dev environment with Jupyter Lab, and 2 custom kernels:\n\n1. A Python kernel with specific Python packages installed.\n2. An R kernel based on the `IRkernel` package with specific R packages installed.\n\nIf you want to skip my explanation and just see the code the flake can be found on my GitHub [here](https://github.com/YanniPapandreou/jupy-nix/blob/main/templates/python-and-r/flake.nix) and it can be easily tried out by running:\n\n```\nnix flake new my-project -t github:YanniPapandreou/jupy-nix\n```\nThis will setup the flake in a new directory `my-project`. You can then enable it by running `nix develop` or if using [Direnv](https://direnv.net/) via `direnv allow .`.\n\n# A custom Python kernel\n\nThis is the most straight-forward of the 2 kernels and also the one for which I found the most material available online. For completeness I include one possible flake below:\n\n```nix\n# flake.nix\n{\ndescription = \"Jupyter Env using Nix\";\n\n  inputs.nixpkgs.url = \"github:NixOS/nixpkgs/nixos-unstable\";\n\n  outputs = { self, nixpkgs }: \n    let\n      system = \"x86_64-linux\"; # Adjust for your architecture if needed\n      pkgs = import nixpkgs { inherit system; };\n      # Adjust which Python packages you want available in Jupyter\n      pythonPackages = ps: with ps; [\n        ipykernel\n        jupyterlab # provides Jupyter Lab\n        matplotlib\n        numpy\n      ];\n      pythonEnv = pkgs.python3.withPackages pythonPackages;\n    in {\n      devShells.${system}.default = pkgs.mkShell {\n        buildInputs = [\n          pythonEnv\n        ];\n\n        shellHook = ''\n          echo \"Jupyter with Python kernel is ready. Run: 'jupyter lab' to launch.\"\n        '';\n      };\n    };\n}\n```\n\nRunning `nix develop` in the directory with this flake and then `jupyter lab` will open Jupyter lab with a Python kernel which has access to **all and only** the packages specified in `pythonPackages`.\n\n# A R kernel based on `IRKernel`\n\nAdding an R kernel proved more challenging as there is much less material available online. The key is to properly copy over the required kernel files which Jupyter needs from the installed `IRkernel` package. Simply following the instructions on [`IRkernel`'s GitHub page](https://github.com/IRkernel/IRkernel?tab=readme-ov-file#installation) does not work in Nix. In particular, my first attempt was to use the following flake:\n\n```nix\n# flake.nix\n{\n  description = \"Jupyter Env using Nix\";\n\n  inputs.nixpkgs.url = \"github:NixOS/nixpkgs/nixos-unstable\";\n\n  outputs = { self, nixpkgs }: \n    let\n      system = \"x86_64-linux\"; # Adjust for your architecture if needed\n      pkgs = import nixpkgs { inherit system; };\n      pythonPackages = ps: with ps; [\n        ipykernel\n        jupyterlab\n        numpy\n        matplotlib\n      ];\n      pythonEnv = pkgs.python3.withPackages pythonPackages;\n      rWrapper = pkgs.rWrapper;\n      # Include R packages desired here\n      RPackages = with pkgs.rPackages; [\n        IRkernel # To provide the Jupyter kernel\n        ggplot2\n      ];\n      rEnv = rWrapper.override {packages = RPackages; };\n    in {\n      devShells.${system}.default = pkgs.mkShell {\n        buildInputs = with pkgs; [\n          pythonEnv\n          rEnv\n        ];\n\n        shellHook = ''\n          echo \"Open an R console and run 'IRkernel::installspec()' to install the kernel. Then run: 'jupyter lab' to launch.\"\n        '';\n      };\n    };\n}\n```\nAfter enabling this shell with `nix develop` I then opened an R console and ran `IRkernel::installspec()`. This lead to an error as the following shows:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nIRkernel::installspec()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in file(file, ifelse(append, \"a\", \"w\")): cannot open file\n'/tmp/RtmpXBrVKY/file1bd0e3b9638e9/kernelspec/kernel.json': Permission denied\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in file(file, ifelse(append, \"a\", \"w\")): cannot open the connection\n```\n\n\n:::\n:::\n\n\n\n\nTo dig into this error I ran `debug(IRkernel::installspec())` and went through each line of the underlying function one by one. The source code can be found by running `IRkernel::installspec` in an R console as well as found [here on GitHub](https://github.com/IRkernel/IRkernel/blob/master/R/installspec.r). The relevant line causing the issue was:\n```r\nwrite(toJSON(spec, pretty = TRUE, auto_unbox = TRUE), file = spec_path)\n```\nThe value of `spec_path` is the `kernelspec/kernel.json` file mentioned in the error which is in a temporary directory under `/tmp`. The `spec` trying to be written to `spec_path` comes from these earlier lines in the source code:\n```r\n# make a kernelspec with the current interpreter's absolute path\nsrcdir <- system.file('kernelspec', package = 'IRkernel')\ntmp_name <- tempfile()\ndir.create(tmp_name)\nfile.copy(srcdir, tmp_name, recursive = TRUE)\nspec_path <- file.path(tmp_name, 'kernelspec', 'kernel.json')\nspec <- fromJSON(spec_path)\nspec$argv[[1]] <- file.path(R.home('bin'), 'R')\nspec$display_name <- displayname\n```\nIn particular, the function `IRkernel::installspec` is copying the `kernelspec` directory from `srcdir` to a temporary file. Where is this `srcdir` located? To see let's run the relevant line in our R console:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsrcdir <- system.file('kernelspec', package = 'IRkernel')\nsrcdir\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/nix/store/agq7aa3pcl9bs5qi7xp523jw7nk1wzh7-r-IRkernel-1.3.2/library/IRkernel/kernelspec\"\n```\n\n\n:::\n:::\n\n\n\nFrom the above we can see that `srcdir` is the installed `IRkernel` in the Nix store. Since the Nix store is read-only it means that the copied directory is also read only and so we cannot write to `spec_path` and even worse we cannot clean up the temporary files when R exits as is hinted by the warning messages in the R console as well[^warnings].\n\n[^warnings]: These warnings do not show up in the rendered Quarto post here however they are shown during rendering on the terminal and look like `rm: cannot remove '/tmp/RtmpwpDMPU/file98da433fe3ad/kernelspec/kernel.json': Permission denied`\n\nWe can see the permissions of the files in `srcdir` by running the following command in R:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsystem(sprintf(\"ls -la %s\", srcdir), intern = TRUE) |> cat(sep = \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntotal 32\ndr-xr-xr-x  2 root root 4096 Jan  1  1970 .\ndr-xr-xr-x  7 root root 4096 Jan  1  1970 ..\n-r--r--r-- 21 root root 2092 Jan  1  1970 kernel.js\n-r--r--r-- 21 root root  123 Jan  1  1970 kernel.json\n-r--r--r-- 23 root root 8492 Jan  1  1970 logo-64x64.png\n-r--r--r-- 23 root root 2009 Jan  1  1970 logo-svg.svg\n```\n\n\n:::\n:::\n\n\n\nThis shows that the files have only read permission. To fix this we can manually change the permission of the copied directory using `chmod -R u+w PATH_TO_TEMP_SPEC_DIR`. However, we can automate this and avoid having to run manual commands by using the flake's shellHook section as follows:\n```nix\n# flake.nix\n{\n  description = \"Jupyter Env using Nix\";\n\n  inputs.nixpkgs.url = \"github:NixOS/nixpkgs/nixos-unstable\";\n\n  outputs = { self, nixpkgs }: \n    let\n      system = \"x86_64-linux\"; # Adjust for your architecture if needed\n      pkgs = import nixpkgs { inherit system; };\n      pythonPackages = ps: with ps; [\n        ipykernel\n        jupyterlab\n        matplotlib\n        numpy\n      ];\n      pythonEnv = pkgs.python3.withPackages pythonPackages;\n      # Where we want to install the IRkernel kernel files\n      irKernelDir = \"$HOME/.local/share/jupyter/kernels/ir\";\n      rWrapper = pkgs.rWrapper;\n      RPackages = with pkgs.rPackages; [\n        IRkernel\n        ggplot2\n      ];\n      rEnv = rWrapper.override {packages = RPackages; };\n    in {\n      devShells.${system}.default = pkgs.mkShell {\n        buildInputs = [\n          pythonEnv\n          rEnv\n        ];\n\n        shellHook = ''\n          echo \"Setting up R kernel for Jupyter...\"\n          # Ensure 'irKernelDir' exists\n          mkdir -p ${irKernelDir}\n          # Copy the files using interpolation\n          cp -r ${pkgs.rPackages.IRkernel}/library/IRkernel/kernelspec/* ${irKernelDir}/\n          # Add write permission\n          chmod -R u+w ${irKernelDir}\n          echo \"Jupyter with R kernel is ready. Run: 'jupyter lab' to launch\"\n        '';\n      };\n    };\n}\n```\n\nRunning `nix develop` with this new flake will correctly install the kernel files to `$HOME/.local/share/jupyter/kernels/ir`. Launching Jupyter Lab should now show an additional R kernel as the following image shows:\n\n![Jupyter Lab with a Python and R kernel](jupyter-with-irkernel.png)\n\nThe R kernel will have access to the packages included in `RPackages`. While this setup works it has the downside that it stores the kernel files in the `$HOME/.local/share/jupyter/kernels` directory. Since the `IRkernel` package is only provided in this dev shell this might cause issues when running Jupyter lab in another devshell. To get around this we can install the kernel files in our flake's directory and adjust the `JUPYTER_PATH` environment[^jupy-docs] variable in the shellHook to look for kernels in this new directory:\n```nix\n# flake.nix\n{\n  description = \"Jupyter Env using Nix\";\n\n  inputs.nixpkgs.url = \"github:NixOS/nixpkgs/nixos-unstable\";\n\n  outputs = { self, nixpkgs }: \n    let\n      system = \"x86_64-linux\"; # Adjust for your architecture if needed\n      pkgs = import nixpkgs { inherit system; };\n      pythonPackages = ps: with ps; [\n        ipykernel\n        jupyterlab\n        matplotlib\n        numpy\n      ];\n      pythonEnv = pkgs.python3.withPackages pythonPackages;\n      # Where we want to install the IRkernel kernel files\n      KernelsDir = \".jupyter/kernels\";\n      rWrapper = pkgs.rWrapper;\n      RPackages = with pkgs.rPackages; [\n        IRkernel\n        ggplot2\n      ];\n      rEnv = rWrapper.override {packages = RPackages; };\n    in {\n      devShells.${system}.default = pkgs.mkShell {\n        buildInputs = [\n          pythonEnv\n          rEnv\n        ];\n\n        shellHook = ''\n          echo \"Setting up R kernel for Jupyter...\"\n          # Ensure an 'ir' folder exists in 'KernelsDir':\n          mkdir -p \"${KernelsDir}/ir\"\n          # Copy the files using interpolation\n          cp -r ${pkgs.rPackages.IRkernel}/library/IRkernel/kernelspec/* \"${KernelsDir}/ir\"\n          # Add write permission\n          chmod -R u+w \"${KernelsDir}/ir\"\n          # set up Jupyter to look for kernels in the '.jupyter' dir:\n          export JUPYTER_PATH=\"$PWD/.jupyter\"\n          echo \"Jupyter with R kernel is ready. Run: 'jupyter lab' to launch\"\n        '';\n      };\n    };\n}\n```\nThis setup places the kernel files in a hidden `.jupyter` directory where your flake is located and adjusts the `JUPYTER_PATH` environment variable to include this directory when it looks for kernels.\n\n[^jupy-docs]: See Jupyter docs [here](https://jupyter-client.readthedocs.io/en/latest/kernels.html#kernel-specs) for more info on this environment variable.\n\n# Conclusion\n\nWe now have a working Jupyter lab dev environment using a simple Nix Flake. In researching how to set up an R kernel for Jupyter in NixOS I also came across some other solutions which might be worth looking at:\n\n- The [Jupyenv](https://github.com/tweag/jupyenv) project: This used to work for me a few years ago but recently it has not be successfully building for me. It seems like the project is not as actively maintained as it used to be and it also has a lot of added complexity for more specialised use cases. For a simple devshell like I was interested in this was not needed.\n- There seems to be a Jupyter service in NixOS options together with a `services.jupyter.kernels` option (see [here](https://search.nixos.org/options?channel=unstable&show=services.jupyter.kernels&from=0&size=50&sort=relevance&type=packages&query=jupyter)). I struggled to figure out how to set this up and could not easily find good documentation for this option. If anyone does please reach out to me [here](mailto:ypapandreou7@gmail.com) to let me know!!\n\nI've also provided two templates in my `jupy-nix` GitHub repo [here](https://github.com/YanniPapandreou/jupy-nix). The default template is the simple Python + IRKernel setup described above. I've also added a second template `full` which provides a newer R kernel using the [`RKernel`](https://github.com/melff/RKernel) package. This is not packaged in Nixpkgs at the time of writing so I had to include it via some extra code. In a future blog post I intend to go through how this can be done for both R packages and Python packages. As an added bonus I also include a Rust kernel in the `full` template using the [`evcxr`](https://github.com/evcxr/evcxr) package. To use this full template one can run:\n\n```\nnix flake new my-project -t github:YanniPapandreou/jupy-nix#full\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}